enclave {
    from "openenclave/edl/syscall.edl" import *;
    from "platform.edl" import *;

    include "common/ocalls.h"

    untrusted {
        int ocall_mpi_send_bytes(
                [in, count=count] const unsigned char *buf,
                size_t count,
                int dest,
                int tag);
        int ocall_mpi_recv_bytes(
                [out, count=count] unsigned char *buf,
                size_t count,
                int source,
                int tag,
                [out] ocall_mpi_status_t *status);
        int ocall_mpi_try_recv_bytes(
                [out, count=count] unsigned char *buf,
                size_t count,
                int source,
                int tag,
                [out] ocall_mpi_status_t *status);
        int ocall_mpi_isend_bytes(
                [in, count=count] const unsigned char *buf,
                size_t count,
                int dest,
                int tag,
                [out] ocall_mpi_request_t *request);
        int ocall_mpi_irecv_bytes(
                size_t count,
                int source,
                int tag,
                [out] ocall_mpi_request_t *request);
        int ocall_mpi_wait(
                [out, count=count] unsigned char *buf,
                size_t count,
                [in] ocall_mpi_request_t *request,
                [out] ocall_mpi_status_t *status);
        void ocall_mpi_barrier(void);
    };

    trusted {
        public void ecall_set_params(int world_rank, int world_size, size_t num_threads);
        public void ecall_start_work(void);
        public int ecall_bitonic_sort(unsigned char *arr, size_t total_length, size_t local_length);
        public int ecall_bucket_sort(unsigned char *arr, size_t total_length, size_t local_length);
    };
};
